// –ö–∞–∫ —Ç–æ–ª—å–∫–æ –±—Ä–∞—É–µ—Ä –ø—Ä–æ—á—ë–ª HTML (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é) –∏ –ø–æ—Å—Ç—Ä–æ–∏–ª DOM (–∫–∞—Ä–∫–∞—Å) - –º–æ–∂–Ω–æ —Å–ª—É—à–∞—Ç—å —ç–ª–º–µ–Ω—Ç—ã DOM (Document Object Model) //
document.addEventListener('DOMContentLoaded', function () {
    /* –≠—Ç–æ—Ç –∫–æ–¥ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è, –∫–æ–≥–¥–∞ HTML –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
       –ï—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å - –≤–µ—Å—å —Å–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ DOM-—ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–ª–æ–º–∞—Ç—å—Å—è. */


    let cachedSalariesData = null;
    let cachedVacancyData = null;
    // –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
    let currentRegion = 'moscow';

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å id "current-datetime"
    const now = new Date();
    const dateTimeElement = document.getElementById('current-datetime');
    if (dateTimeElement) {
        dateTimeElement.textContent = now.toLocaleString(undefined, {
            timeZoneName: 'short' // –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        });
    }


    // === –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ —á–µ—Ä–µ–∑ API –∑–∞–ø—Ä–æ—Å –∫ Redis/PostgreSQL === //
    async function fetchChartStatistics() {
        const res = await fetch('/api/vacancy-data');
        if (!res.ok) throw new Error(`API: ${res.status} - ${await res.text()}`);
        return res.json();
    }


    // === –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞ (–¥–ª—è –ª–µ–≥–µ–Ω–¥—ã) === //
    const isMobile = window.innerWidth <= 600;


    // === –ë–∞–∑–æ–≤—ã–π –º–∞–∫–µ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤ (–æ—Å—å Y, –æ—Ç—Å—Ç—É–ø—ã, —à—Ä–∏—Ñ—Ç –∏ —Ç.–¥.) === //
    const chartLayout = {
        height: 300, // üëà —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—ã—Å–æ—Ç—É –≥—Ä–∞—Ñ–∏–∫–∞ –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        yaxis: {
            title: {
                text: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π',
                standoff: 20,
            },
            tickformat: ',.0f',
            automargin: true
        },
        margin: {
            t: 30, b: 80, l: 60, r: 30
        },
        hovermode: 'closest',
        showlegend: true,
        font: {
            family: 'Exo 2, sans-serif',
            size: isMobile ? 11 : 12,  // —É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π –æ–±—â–∏–π —à—Ä–∏—Ñ—Ç
            weight: 'bold'
        },
        legend: {
            orientation: 'h',
            x: 0.5,
            y: 1.2,      // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –≤–Ω–∏–∑, –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ -0.2 (–≤–Ω–∏–∑ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –≤–≤–µ—Ä—Ö –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ)
            xanchor: 'center',
            yanchor: 'top',
            font: {size: 12},
            bgcolor: 'rgba(255,255,255,0)',
            borderwidth: 0,
            itemclick: 'toggleothers',  // –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤—ã–±–æ—Ä
        }
    };


    // === –ß–∞—Å–æ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ (–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ (Y), –∏–º–µ–µ—Ç X –ø–æ —á–∞—Å–∞–º) === //
    const hourlyChartLayout = (() => {
        const end = new Date(now);
        end.setHours(now.getHours() + 1, 0, 0, 0);

        const start = new Date(end.getTime() - 24 * 60 * 60 * 1000);
        const startReserve = new Date(start.getTime() - 1 * 60 * 60 * 1000);

        const tickVals = [];
        const tickTexts = [];

        for (let t = new Date(start); t <= now; t.setHours(t.getHours() + 1)) {
            if (!isMobile || t.getHours() % 2 === 0) {  // –ï—Å–ª–∏ –Ω–µ –º–æ–±–∏–ª—å–Ω—ã–π ‚Äî –≤—Å–µ —á–∞—Å—ã, –µ—Å–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–π ‚Äî —Ç–æ–ª—å–∫–æ —á–µ—Ç–Ω—ã–µ
                tickVals.push(new Date(t));
                tickTexts.push(t.getHours().toString().padStart(2, '0') + ':00');
            }
        }

        return {
            ...chartLayout,
            xaxis: {
                type: 'date',
                tickvals: tickVals,
                ticktext: tickTexts,
                tickangle: -90,
                range: [startReserve, end],
                automargin: true
            }
        };
    })();


    // === –î–Ω–µ–≤–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫ (–æ—Ç—Ç–∞–ª–∫–∏–≤–∞–µ—Ç—Å—è –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ (Y), –∏–º–µ–µ—Ç X –ø–æ –¥–Ω—è–º) === //
    const dailyChartLayout = (() => {
        const daysToShow = 15;
        const end = new Date(now);
        const extendedEnd = new Date(end.getTime() + 24 * 60 * 60 * 1000);
        end.setHours(23, 59, 59, 999);

        const start = new Date(end.getTime() - (daysToShow - 1) * 24 * 60 * 60 * 1000);
        const startReserve = new Date(start.getTime() - 12 * 60 * 60 * 1000); // –∑–∞–ø–∞—Å —Å–ª–µ–≤–∞

        const tickVals = [];
        const tickTexts = [];

        for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {
            tickVals.push(new Date(d));
            tickTexts.push(`${d.getFullYear()}.${String(d.getMonth() + 1).padStart(2, '0')}.${String(d.getDate()).padStart(2, '0')}`);
        }

        return {
            ...chartLayout,
            xaxis: {
                type: 'date',
                tickvals: tickVals,
                ticktext: tickTexts,
                tickangle: -90,
                automargin: true,
                range: [startReserve, extendedEnd],
                tickmode: 'array',
                dtick: 24 * 60 * 60 * 1000
            }
        };
    })();


    // === –Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è (–ù–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, —Ü–≤–µ—Ç–∞ –∏ –∫–ª—é—á–∏) === //
    const languagesDesign = [
        {name: '1–°', color: '#e31e24', key: 'one_c'},
        {name: 'C#', color: 'purple', key: 'csharp'},
        {name: 'Go', color: '#00ADD8', key: 'go'},
        {name: 'C++', color: 'green', key: 'cpp'},
        {name: 'PHP', color: '#68217A', key: 'php'},
        {name: 'Dart', color: '#00B4AB', key: 'dart'},
        {name: 'Java', color: '#f89820', key: 'java'},
        {name: 'Ruby', color: '#D10000', key: 'ruby'},
        {name: 'Scala', color: '#DC322F', key: 'scala'},
        {name: 'Swift', color: '#FF6F00', key: 'swift'},
        {name: 'Kotlin', color: '#7F52FF', key: 'kotlin'},
        {name: 'Python', color: 'blue', key: 'python'},
        {name: 'JavaScript', color: 'gold', key: 'javascript'},
        {name: 'TypeScript', color: '#3178C6', key: 'typescript'}
    ];


    // === –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û (–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞ –≥—Ä–∞—Ñ–∏–∫–µ, —Ü–≤–µ—Ç) === //
    const developerDesign = {
        color: 'crimson',
        name: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ü–û',
    };


    function renderChart({
                             htmlContainerId,       // –Ω–∞–∑–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞/—Ç–∞–±–ª–∏—Ü—ã –≤ —Ñ–∞–π–ª–µ html
                             dataLines,             // –º–∞—Å—Å–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
                             designLines,           // –º–∞—Å—Å–∏–≤ –¥–∏–∑–∞–π–Ω–æ–≤ –ª–∏–Ω–∏–π –∏–ª–∏ –æ–¥–Ω–∞ –ª–∏–Ω–∏—è
                             switchable = false,    // –º–æ–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å daily/hourly
                             defaultView,           // 'daily' –∏–ª–∏ 'hourly'
                             showLegend = true,     // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ª–µ–≥–µ–Ω–¥—É —Å–ø—Ä–∞–≤–∞
                             region = 'moscow'       // –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
                         }) {

        const buildTraces = (data, design) => {
            if (!design) return [];

            const traces = (Array.isArray(design) ? design : [design]).map(object => {
                const d = data[object.key] || data;

                const vals = d[defaultView];
                if (!vals) return null;

                // üÜï –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ vals ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { date, count }
                if (Array.isArray(vals) && vals.length > 0 && 'date' in vals[0] && 'count' in vals[0]) {
                    return {
                        x: vals.map(v => new Date(v.date)),
                        y: vals.map(v => v.count),
                        mode: 'lines+markers',
                        name: object.name + '\u00A0\u00A0\u00A0\u00A0',
                        marker: {color: object.color},
                        line: {shape: 'linear', width: 2},
                        hovertemplate: '%{y}<extra></extra>'
                    };
                }

                // üß† –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ (moscow/russia)
                const x = defaultView === 'daily'
                    ? vals.days.map(d => {
                        const date = new Date(d);
                        return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 23, 59, 59, 999);
                    })
                    : vals.hours.map(h => {
                        const date = new Date(h);
                        return new Date(
                            date.getFullYear(),
                            date.getMonth(),
                            date.getDate(),
                            date.getHours(),
                            date.getMinutes(),
                            date.getSeconds(),
                            date.getMilliseconds()
                        );
                    });

                let y = [];
                if (region === 'moscow') {
                    y = vals.moscow_counts;
                } else if (region === 'russia') {
                    y = vals.russia_counts;
                } else {
                    y = vals.counts || [];
                }

                return {
                    x, y,
                    mode: 'lines+markers',
                    name: object.name + '\u00A0\u00A0\u00A0\u00A0',
                    marker: {color: object.color},
                    line: {shape: 'linear', width: 2},
                    hovertemplate: '%{y}<extra></extra>'
                };
            }).filter(Boolean);

            return traces.length > 1
                ? traces.sort((a, b) => b.y[b.y.length - 1] - a.y[a.y.length - 1])
                : traces;
        };

        const doRender = () => {
            const traces = buildTraces(dataLines, designLines);
            if (!traces.length) return;

            // –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ –æ—Ç—Ä–∏—Å–æ–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
            Plotly.purge(htmlContainerId);

            const layout = {
                ...(defaultView === 'daily' ? dailyChartLayout : hourlyChartLayout),
                showlegend: showLegend,
                dragmode: false // –û—Ç–∫–ª—é—á–∞–µ–º zoom —Ä–µ–∂–∏–º
            };

            Plotly.react(htmlContainerId, traces, layout, {displayModeBar: false, responsive: true});
        };

        doRender();

        if (switchable) {
            document.getElementById(htmlContainerId)?.addEventListener('click', () => {
                defaultView = defaultView === 'daily' ? 'hourly' : 'daily';
                doRender();
            });
        }
    }


    // === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ === //
    async function initCharts(region = 'moscow') {
        try {
            const data = await fetchChartStatistics();

            renderChart({
                htmlContainerId: 'chart_software_developer',
                dataLines: { software_developer: data.software_developer },
                designLines: developerDesign,
                switchable: true,
                defaultView: 'hourly',
                showLegend: false,
                region // –ø–µ—Ä–µ–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω
            });

            renderChart({
                htmlContainerId: 'chart_all_languages',
                dataLines: data,
                designLines: languagesDesign,
                switchable: false,
                defaultView: 'daily',
                showLegend: true,
                region
            });

        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤:', e);
        }
    }

    // –ó–∞–ø—É—Å–∫
    initCharts('russia');


    // === –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –ú–æ—Å–∫–≤–∞/–†–æ—Å—Å–∏—è === //
    function initRegionTabs() {

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–ª–∞—Å—Å–æ–º .tab
        const tabs = document.querySelectorAll('.tab');

        // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–ª–∏–∫–æ–≤ (—á—Ç–æ–±—ã –≤–∫–ª–∞–¥–∫–∏ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ –∫–ª–∏–∫–∏)
        tabs.forEach(tab => {
            tab.addEventListener('click', () => {

                // –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ (–∏–Ω–∞—á–µ –≤—Å–µ –≤–∫–ª–∞–¥–∫–∏ –±—É–¥—É—Ç "–∞–∫—Ç–∏–≤–Ω—ã–º–∏")
                tabs.forEach(t => t.classList.remove('active'));

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å active —Ç–µ–∫—É—â–µ–π –≤–∫–ª–∞–¥–∫–µ (–∏–Ω–∞—á–µ –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–µ –±—É–¥–µ—Ç –ø–æ–Ω—è—Ç–Ω–æ, –∫–∞–∫–∞—è –≤–∫–ª–∞–¥–∫–∞ –≤—ã–±—Ä–∞–Ω–∞)
                tab.classList.add('active');

                currentRegion = tab.dataset.value;
                updateSalaryTable(currentRegion);
            });
        });

        // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–æ—Å–∫–≤–∞)
        updateSalaryTable(currentRegion);
    }

    initRegionTabs();


    async function updateSalaryTable(region) {
        try {
            if (!cachedSalariesData || !cachedVacancyData) {
                const [salariesRes, vacancyRes] = await Promise.all([
                    fetch("/api/salaries"),
                    fetch("/api/vacancy-data")
                ]);

                [cachedSalariesData, cachedVacancyData] = await Promise.all([
                    salariesRes.json(),
                    vacancyRes.json()
                ]);
            }

            const tbody = document.querySelector(".salary-table tbody");
            tbody.innerHTML = "";

            cachedSalariesData.forEach(lang => {
                const tr = document.createElement("tr");
                tr.onclick = () => location.href = `/${lang.code.toLowerCase()}`;

                const tdLogo = document.createElement("td");
                const img = document.createElement("img");
                img.src = `/static/logos/${lang.code}.webp`;
                img.alt = lang.name;
                tdLogo.appendChild(img);
                tdLogo.appendChild(document.createTextNode(lang.name));
                tr.appendChild(tdLogo);

                const langKey = lang.code.toLowerCase();
                const langVacData = cachedVacancyData[langKey];

                let vacancyCount = '';
                if (langVacData && langVacData.daily && langVacData.daily[region + '_counts'] && langVacData.daily[region + '_counts'].length > 0) {
                    const counts = langVacData.daily[region + '_counts'];
                    vacancyCount = counts[counts.length - 1] || '';
                }

                const tdVacancies = document.createElement("td");
                tdVacancies.textContent = vacancyCount;
                tr.appendChild(tdVacancies);

                const salaries = lang[region] || lang["russia"] || [];
                const normalized = [...salaries];
                while (normalized.length < 4) normalized.push('');

                normalized.forEach(value => {
                    const td = document.createElement("td");
                    td.innerHTML = value;
                    tr.appendChild(td);
                });

                tbody.appendChild(tr);
            });

            addTableSorting();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–∞–±–ª–∏—Ü—ã –∑–∞—Ä–ø–ª–∞—Ç –∏ –≤–∞–∫–∞–Ω—Å–∏–π:", error);
        }
    }


// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    let currentSort = {
        columnIndex: null,
        ascending: true
    };

    function addTableSorting() {
        const headers = document.querySelectorAll(".salary-table th");

        headers.forEach((th, index) => {
            if (!th.hasAttribute("data-sortable")) return;

            th.style.cursor = "pointer";

            th.onclick = () => {
                const ascending = currentSort.columnIndex === index ? !currentSort.ascending : true;
                currentSort = {columnIndex: index, ascending};

                // –£–¥–∞–ª—è–µ–º –∫–ª–∞—Å—Å—ã —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–æ –≤—Å–µ—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
                headers.forEach(h => h.classList.remove('sort-asc', 'sort-desc'));

                // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å
                th.classList.add(ascending ? 'sort-asc' : 'sort-desc');

                sortTableByColumn(index, ascending);
            };
        });
    }

    function sortTableByColumn(columnIndex, ascending = true) {
        const tbody = document.querySelector(".salary-table tbody");
        const rows = Array.from(tbody.querySelectorAll("tr"));

        rows.sort((a, b) => {
            let aValue, bValue;

            // –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É —Å—Ç–æ–ª–±—Ü—É (–Ω–∞–∑–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞), –¥–æ—Å—Ç–∞—ë–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –∏–∑ —É–∑–ª–∞
            if (columnIndex === 0) {
                aValue = getLanguageNameFromCell(a.children[columnIndex]);
                bValue = getLanguageNameFromCell(b.children[columnIndex]);
            } else {
                aValue = a.children[columnIndex].textContent.trim();
                bValue = b.children[columnIndex].textContent.trim();
            }

            const aNum = parseFloat(aValue.replace(/\s/g, '').replace(',', '.'));
            const bNum = parseFloat(bValue.replace(/\s/g, '').replace(',', '.'));

            if (isNaN(aNum) || isNaN(bNum)) {
                return ascending ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);
            } else {
                return ascending ? aNum - bNum : bNum - aNum;
            }
        });

        rows.forEach(row => tbody.appendChild(row));
    }


// –í—ã–∑–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
//     updateSalaryTable("russia");

    function getLanguageNameFromCell(cell) {
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –ø–µ—Ä–≤—ã–π —Ä–µ–±—ë–Ω–æ–∫, –∞ —Ç–µ–∫—Å—Ç ‚Äî –≤—Ç–æ—Ä–æ–π (—É–∑–µ–ª —Å —Ç–µ–∫—Å—Ç–æ–º)
        // –ú–æ–∂–Ω–æ –≤–∑—è—Ç—å —Ç–µ–∫—Å—Ç —É–∑–ª–∞ –ø–æ—Å–ª–µ img:
        for (const node of cell.childNodes) {
            if (node.nodeType === Node.TEXT_NODE && node.textContent.trim() !== '') {
                return node.textContent.trim();
            }
        }
        return cell.textContent.trim(); // fallback
    }

});